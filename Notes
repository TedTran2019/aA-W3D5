Metaprogramming and Reflection
1. Using send
2. Using define_method
3. Using method_missing

Reflection/introspection -> ability for a program to examine itself
#methods
#send(:method_name) -> to call 
macro -> class method that will define more methods
define_method(name) {} will define a method with that name, scope being the code
Famous macros: attrs, belongs_to / has_many

If a method is called and no method exists, #method_missing is called. 
Passes method name as symbol and all arguments to method_missing

Dynamic finders -> feature of rails till' 5, where they are no longer 
supported due to verbose code and being not performant.

#class, #is_a? Type, etc.

Class instance variables and methods are the same as instance ones, just called 
on a class instead of an instance of a class.

@@ to declare a class variable are like class instance variables, but they're 
shared between super-class and subclass.

$ for global variabls -> accessible anywhere

Flexbox
1. flex-parent, flex-child. Setting display: flex; doesn't go more than 1 level deep
2. justify-content vs align-items
3. flex-wrap: wrap; to wrap around
flex: 1 100% -> shorthand for... how does flex basis work?
media queries -> deal with different screen sizes
order for where to put flexbox elements
May need to rewatch Flexbox vid -> was quite confusing

Flexbox Froggy
justify-content -> aligns items horizontally and accepts 
flex-start -> left of container
flex-end  -> right of container
center -> center of container
space-between -> equal spacing between 
space-around -> equal spacing around

align-items -> align items vertically and accepts 
flex-start -> at top
flex-end -> at bottom
center  -> at vertical center
baseline  -> at baseline
stretch -> stretch to fit container

flex-direction defines direction and accepts 
row -> left to right
row-reverse -> right to left 
column -> top to bottom
column-reverse -> bottom to top

flex-direction is default row, if you switch to col, align-items and justify-content 
switches usage
flex-end and flex-start change when you use flex-direction reverse

Using order to change item order in container! Default of 0, but can set 
to a pos or neg number.

align-self is like align-items but for an individual

flex-wrap -> accepts 
wrap  -> wrap around to additional lines
nowrap -> every item fit to single line
wrap-reverse -> wrap around to additional lines in reverse

flex-flow combines flex-direction and flex-wrap

align-content -> sets how multiple lines are spaced apart from each other, accepts
flex-start 
flex-end 
center 
space-between 
space-around 
stretch 

This determines spacing between lines, while align-items determines how the 
items as a whole are aligned within the container.
-----------------------------------------

Huh, you can use grep and such in Ruby. 
Learning grep and regex would be nice... 

1. know when to use class and when to use instance methods
2. know how to use define_method inside a class to add instance methods 
3. be able to create a generic SQLobject class that abstracts table logic away
4. understand how ActiveRecord interfaces with the database 
5. be able to write generic query methods that any class inheriting from SQLObject 
can use 

---------------------------------------

Cleaning up and fixing issues!
Ruby 
1. which gem -> to make sure you have RubyGems 
2. gem update --system to get latest version of RubyGems
3. gem install gem_name to get gem 
4. gem list -> See all gems
5. gem outdated -> see all outdated gems 
6. gem update -> update all gems
7. gem cleanup -> remove old versions of gems

To fix fileutils conflict 
1. gem uninstall fileutils 
2. gem update fileutils --default
3. Can gem list | grep fileutils to see more info

NPM 
1. npm cache verify -> Testing to see if cache data is valid
2. npm -v to check npm version 
3. npm install -g npm@latest to install latest stable version
4. npm install -g npm-check-updates
5. ncu -u
6. npm update or npm install

Upgrading rbenv 
1. cd ~/.rbenv -> git pull 
2. cd ~/.rbenv/plugins/ruby-build -> git pull
3. Install latest version of Ruby! rbenv install -l 
4. rbenv install <pick version>
5. rbenv global <pick version> to choose Ruby ver.
6. gem install bundler -> Install rest of gems needed

Issue with gem "annotate" is due to the new 3.0.0 version!

Usage of instance_variable_get and instance_variable_set for attr_accessors! 
Otherwise, you can't access them due to scoping issues. 

execute vs execute2
execute2 method returns an array
Cannot interpolate into FROM with ?, have to use #{} for both

To run a specific line for testing on RSPEC, add :line_number
Ugh, wasted a lot of time because accidentally used .each instead of 
.map and couldn't find the error...

Remember implicit self depending on whether it's the class or instance of one...

Understand how belongs_to and has_many work in Rails 
Be able to metaprogram new methods 
Be able to write association methods that use joins (has_many_through)
Know when to write code in a module vs new class

extend Module -> puts it as class methods
define_method -> Used on a class to define methods at the instance level
When coding, having diagram or everything planned/built before you start 
makes things a lot easier. Do the thinking first, code after.
